---
---
<button id="themeToggle" title="Theme Toggle">
    <svg width="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <!-- Sun Icon -->
        <g class="sun">
            <circle cx="12" cy="12" r="5" fill="currentColor"/>
            <g stroke="currentColor" stroke-width="2">
                <line x1="12" y1="1" x2="12" y2="4"/>
                <line x1="12" y1="20" x2="12" y2="23"/>
                <line x1="4.22" y1="4.22" x2="6.34" y2="6.34"/>
                <line x1="17.66" y1="17.66" x2="19.78" y2="19.78"/>
                <line x1="1" y1="12" x2="4" y2="12"/>
                <line x1="20" y1="12" x2="23" y2="12"/>
                <line x1="4.22" y1="19.78" x2="6.34" y2="17.66"/>
                <line x1="17.66" y1="6.34" x2="19.78" y2="4.22"/>
            </g>
        </g>
        <!-- Moon Icon -->
        <g class="moon">
            <path d="M21.77 12.29A9.77 9.77 0 1 1 11.71 2.23 7.75 7.75 0 1 0 21.77 12.29z" fill="currentColor"/>
        </g>
    </svg>
</button>

<style>
    #themeToggle {
        border: 0;
        background: none;
    }

    #themeToggle:hover {
        cursor: pointer;
        transform: rotate(10deg);
    }

    .sun {
        display: none;
        color: #1e1e2e; /* Sun icon color in light mode */
    }

    .moon {
        display: none;
        color: #f0ead6; /* Moon icon color in dark mode */
    }
 
    :global(.light) .sun { 
        display: inline;
    }

    :global(.light) .moon { 
        display: none;
    }

    :global(.dark) .sun {
        display: none;
    }

    :global(.dark) .moon {
        display: inline;
    }
</style>

<script>
    // Function to get the current theme from localStorage or default to dark
    const getTheme = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: light)').matches) {
            return 'light';
        }
        return 'dark';
    };

    // Function to update the icon visibility and color based on the theme
    const updateIconVisibility = (theme) => {
        const sunIcon = document.querySelector('.sun') as HTMLElement;
        const moonIcon = document.querySelector('.moon') as HTMLElement;
        const themeToggle = document.getElementById('themeToggle') as HTMLElement;
        if (sunIcon && moonIcon && themeToggle) {
            if (theme === 'light') {
                sunIcon.style.display = 'inline';
                moonIcon.style.display = 'none';
                themeToggle.style.color = '#1e1e2e'; // Sun icon color in light mode
            } else {
                sunIcon.style.display = 'none';
                moonIcon.style.display = 'inline';
                themeToggle.style.color = '#fdebf3'; // Moon icon color in dark mode
            }
        }
    };

    // Immediately apply the theme class to the document
    const applyInitialTheme = () => {
        const theme = getTheme();
        if (theme === 'light') {
            document.documentElement.classList.add('light');
            document.documentElement.classList.remove('dark');
        } else {
            document.documentElement.classList.add('dark');
            document.documentElement.classList.remove('light');
        }
        updateIconVisibility(theme);
    };

    applyInitialTheme();

    document.addEventListener('DOMContentLoaded', () => {
        // Toggle theme and update localStorage on button click
        const handleToggleClick = () => {
            const isLightMode = document.documentElement.classList.toggle('light');
            document.documentElement.classList.toggle('dark', !isLightMode);
            const newTheme = isLightMode ? 'light' : 'dark';
            localStorage.setItem("theme", newTheme);
            updateIconVisibility(newTheme);
        };

        // Attach the click event listener to the theme toggle button
        const themeToggle = document.getElementById("themeToggle");
        if (themeToggle) {
            themeToggle.addEventListener("click", handleToggleClick);
        }
    });
</script>

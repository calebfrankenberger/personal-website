---
---
<button class="navbar__button" id="themeToggle" title="Theme Toggle">
    <svg width="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <!-- Sun Icon -->
        <g class="sun">
            <circle cx="12" cy="12" r="5" fill="currentColor"/>
            <g stroke="currentColor" stroke-width="2">
                <line x1="12" y1="1" x2="12" y2="4"/>
                <line x1="12" y1="20" x2="12" y2="23"/>
                <line x1="4.22" y1="4.22" x2="6.34" y2="6.34"/>
                <line x1="17.66" y1="17.66" x2="19.78" y2="19.78"/>
                <line x1="1" y1="12" x2="4" y2="12"/>
                <line x1="20" y1="12" x2="23" y2="12"/>
                <line x1="4.22" y1="19.78" x2="6.34" y2="17.66"/>
                <line x1="17.66" y1="6.34" x2="19.78" y2="4.22"/>
            </g>
        </g>
        <!-- Moon Icon -->
        <g class="moon">
            <path d="M21.77 12.29A9.77 9.77 0 1 1 11.71 2.23 7.75 7.75 0 1 0 21.77 12.29z" fill="currentColor"/>
        </g>
    </svg>
</button>

<style>
    #themeToggle {
        border: 0;
        background: none;
        display: flex;
        align-items: center;
    }

    #themeToggle svg {
        display: block;
        margin: auto;
    }

    #themeToggle:hover {
        cursor: pointer;
        transform: rotate(10deg);
    }

    .sun {
        display: none;
        color: var(--text-light); /* Match the light mode text color */
    }

    .moon {
        display: none;
        color: var(--text); /* Match the dark mode text color */
    }

    :global(.light) .sun { 
        display: inline;
    }

    :global(.light) .moon { 
        display: none;
    }

    :global(.dark) .sun {
        display: none;
    }

    :global(.dark) .moon {
        display: inline;
    }
 
    @media only screen and (max-width: 37.5rem) {
    #themeToggle {
      margin-left: 0; /* Remove left margin for small screens */
    }
  }

}


</style>

<script>
    const getTheme = () => {
        return localStorage.getItem('theme') || 
               (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
    };

    const applyTheme = (theme) => {
        document.documentElement.classList.toggle('light', theme === 'light');
        document.documentElement.classList.toggle('dark', theme !== 'light');
    };

    const initTheme = () => {
        const theme = getTheme();
        applyTheme(theme);
    };

    initTheme(); // Apply the theme immediately when the script loads

    document.addEventListener('DOMContentLoaded', () => {
        const handleToggleClick = () => {
            const isLightMode = document.documentElement.classList.toggle('light');
            document.documentElement.classList.toggle('dark', !isLightMode);
            const newTheme = isLightMode ? 'light' : 'dark';
            localStorage.setItem("theme", newTheme);
        };

        const themeToggle = document.getElementById("themeToggle");
        if (themeToggle) {
            themeToggle.addEventListener("click", handleToggleClick);
        }

        document.addEventListener('astro:page-load', initTheme);
    });
</script>
